from solver import Solver, _
import z3

# https://www.youtube.com/watch?v=v3z-urLs9zo

GIVEN = (
    (_, _, _, _, _, _, _, _, _),
    (_, _, _, _, _, _, _, _, _),
    (_, _, _, _, _, _, _, _, _),
    (_, _, _, _, _, _, _, _, _),
    (_, _, _, _, _, _, _, _, 9),
    (_, _, _, _, _, _, _, _, _),
    (_, _, _, _, _, _, _, _, _),
    (_, _, _, _, _, _, _, _, _),
    (_, _, _, _, _, _, 4, _, _),
)

DOTS = [
    [(0, 0), (1, 0)],
    [(3, 0), (4, 0)],
    [(6, 0), (7, 0)],
    [(5, 1), (5, 2)],
    [(6, 1), (6, 2)],
    [(8, 1), (8, 2)],
    [(3, 3), (4, 3)],
    [(7, 3), (7, 4)],
    [(2, 4), (2, 5)],
    [(3, 4), (4, 4)],
    [(1, 5), (1, 6)],
    [(0, 6), (1, 6)],
    [(1, 7), (1, 8)],
    [(2, 7), (2, 8)],
    [(7, 7), (7, 8)],
    [(8, 7), (8, 8)],
]


def dots(s, vars):
    d = z3.Int("d")
    s.add(d > 0, d < 9)

    for (c0, r0), (c1, r1) in DOTS:
        v0 = vars[r0][c0]
        v1 = vars[r1][c1]

        s.add(z3.Abs(v1 - v0) == d)


solver = (
    Solver(GIVEN)
    .thermos([
        [(6, 1), (7, 1), (8, 0), (7, 0)],
        [(0, 4), (0, 5), (1, 5), (2, 5)],
    ])
    .whisper_lines([
        [(1, 0), (2, 1), (3, 0)],
        [(4, 0), (5, 1), (6, 0)],
        [(1, 3), (2, 2), (3, 3)],
        [(4, 3), (5, 2), (6, 3)],
        [(7, 4), (7, 5)],
        [(0, 6), (1, 6), (2, 7), (3, 6), (4, 6), (5, 5), (6, 6), (7, 6)],
        [(2, 8), (3, 8)],
        [(4, 8), (5, 7)],
    ])
    .extra_constraint(dots)
)

solution = solver.solve()

Solver.pretty_print(solution)
